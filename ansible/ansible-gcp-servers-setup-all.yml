---
# file: ansible-gcp-servers-setup-all.yml
# configures the server instances
# This Playbook has Three Plays: one for critical configurations in all servers
# A second one for installing software in web servers
# a third one to install software in the Load Balancer server

# This First Play Sets up critical configuration on servers
- hosts: targets
  # as the systems are not yet "known" by Ansible Facts cannot be gathered yet
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_method: sudo

  pre_tasks:
    # To operate remotely in critical files without direct user input
    - name: Remove require tty - alt
      lineinfile:
        regexp: "requiretty"
        dest: /etc/sudoers.d/os_defaults
        state: absent
    # Giving permissions in sudoers for system critical files (see https://docs.ansible.com/ansible/latest/modules/lineinfile_module.html)
    - name: Validate the sudoers file before saving  not to require password
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%ADMIN ALL='
        line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s
    # Install the SSH key on servers
    - name: install ssh key
      authorized_key:
        user: ubuntu
        key: "{{ lookup('file', '/home/vagrant/.ssh/id_rsa.pub') }}"
        state: present
    
    - name: Update apt cache
      apt:
        update_cache: yes

# Database Tasks 
- hosts: database
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  vars_files:
    - vars.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Installing Mysql
      package:
         name: "{{item}}"
         state: present
         update_cache: yes
      loop:
        - mysql-server
        - mysql-client
        - python3-mysqldb
        - libmysqlclient-dev
      become: yes
       
    - name: start and enable mysql service
      service:
         name: mysql
         state: started
         enabled: yes

    - name: Set root user password
      mysql_user:
        name: root
        password: "{{root_password}}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        host: localhost
        login_user: root
        login_password: ''
        state: present

    - name: Create admin user with remote access
      mysql_user:
        name: "{{admin_user}}"
        password: "{{admin_password}}"
        priv: '*.*:ALL'
        host: '%'
        append_privs: yes
        login_user: root
        login_password: "{{root_password}}"
        state: present
    
    - name: creating database 
      mysql_db:
        name: "{{db_name}}"
        state: present
        login_user: root
        login_password: "{{root_password}}"
    
    - name: Enable remote login to mysql
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regex: '^bind-address\s*=\s*127.0.0.1'
        line: 'bind-address = 0.0.0.0'
        backup: yes
      notify:
        - Restart mysql

    - name: Execute MySQL secure installation
      expect:
        command: mysql_secure_installation
        responses:
          'Enter password for user root:': "{{ root_password }}"
          'Press y\|Y for Yes, any other key for No': 'Y'
          'Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG': "{{ password_validation_policy }}"
          'Change the password for root \? \(\(Press y\|Y for Yes, any other key for No\)': 'n'
          'Remove anonymous users\? \(Press y\|Y for Yes, any other key for No\)': 'Y'
          'Disallow root login remotely\? \(Press y\|Y for Yes, any other key for No\)': 'Y'
          'Remove test database and access to it\? \(Press y\|Y for Yes, any other key for No\)': 'Y'
          'Reload privilege tables now\? \(Press y\|Y for Yes, any other key for No\)': 'Y'
      environment:
        MYSQL_PWD: "{{ root_password }}"

  handlers:
    - name: Restart mysql
      service:
        name: mysql
        state: restarted

    - name: Install Python and pip
      apt:
        name:
          - python
          - pip
        state: present

    - name: Install required packages in virtualenv
      pip:
        name:
          - flask
          - requests
          - pymysql
          - cryptography
          - gunicorn
        state: present

    
    

# This Second Play installs the required software in web servers
# tasks names are self explanatory
- hosts: web
  gather_facts: True
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    - name: Add NGINX Repository
      apt_repository:
        repo: ppa:nginx/stable
        state: present

    - name: install nginx
      apt:
        pkg: nginx
        state: present

    - name: Install Python3 and pip
      apt:
        name:
          - python3
          - pip
        state: present

    - name: Deploy Flask Website Content
      ansible.builtin.synchronize:
        src: /home/vagrant/project/application
        dest: /var/www/html

    - name: Install required packages in virtualenv
      pip:
        name:
          - flask
          - requests
          - cryptography
          - pymysql
          - gunicorn
        state: present

    - name: Bind gunicorn
      become: yes
      raw: cd /var/www/html/application && nohup gunicorn --bind 0.0.0.0:5000 app:app > /dev/null 2>&1 &

  # The handler is common to the nginx installation steps
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

# This Third Play install the required software in the Load Balancer
- hosts: loadbalancer
  gather_facts: true
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:
    # as there is no internal DNS service, we need to populate theb /etc/hosts
    - name: update /etc/hosts file for name resolution of self
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "127.0.0.1 {{item}}"
        state: present
      with_items: balancer
    # as there is no internal DNS service, we need to populate the /etc/hosts
    - name: update /etc/hosts file for name resolution
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_default_ipv4']['address'] is defined
      with_items: '{{groups.web}}'

    - name: add HAPROXY Repository
      apt_repository:
        repo: ppa:vbernat/haproxy-2.1
        update_cache: true

    - name: install haproxy and socat
      apt:
        pkg: ['haproxy', 'socat']
        state: latest

    - name: enable haproxy
      lineinfile:
        path: /etc/default/haproxy
        regexp: "^ENABLED.+$"
        line: "ENABLED=1"
        state: present

    - name: deploy haproxy config
      template:
        src: /home/vagrant/project/application/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: 0644
        validate: haproxy -f %s -c -q
      notify: restart haproxy

    - name: Ensure HAProxy is started and enabled on boot.
      service:
        name: haproxy
        state: started
        enabled: yes

# The handler is common to the nginx installation steps
  handlers:

  - name: restart haproxy
    service:
      name: haproxy
      state: restarted
